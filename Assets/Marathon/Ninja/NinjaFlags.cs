using UnityEngine;
using System.Collections.Generic;
using System;

namespace Marathon.Formats.Mesh.Ninja
{
    /* Taken from a mixture of Rad's research and the Sonic 4 decompilation.
       https://gist.github.com/Radfordhound/5650ef12209da2709a6bf9b705bdd79c */

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum MinFilter : uint
    {
        NND_MIN_NEAREST = 0,
        NND_MIN_LINEAR = 1,
        NND_MIN_NEAREST_MIPMAP_NEAREST = 2,
        NND_MIN_NEAREST_MIPMAP_LINEAR = 3,
        NND_MIN_LINEAR_MIPMAP_NEAREST = 4,
        NND_MIN_LINEAR_MIPMAP_LINEAR = 5,
        NND_MIN_ANISOTROPIC = 6,
        NND_MIN_ANISOTROPIC2 = 6,
        NND_MIN_ANISOTROPIC_MIPMAP_NEAREST = 7,
        NND_MIN_ANISOTROPIC2_MIPMAP_NEAREST = 7,
        NND_MIN_ANISOTROPIC_MIPMAP_LINEAR = 8,
        NND_MIN_ANISOTROPIC2_MIPMAP_LINEAR = 8,
        NND_MIN_ANISOTROPIC4 = 9,
        NND_MIN_ANISOTROPIC4_MIPMAP_NEAREST = 10,
        NND_MIN_ANISOTROPIC4_MIPMAP_LINEAR = 11,
        NND_MIN_ANISOTROPIC8 = 12,
        NND_MIN_ANISOTROPIC8_MIPMAP_NEAREST = 13,
        NND_MIN_ANISOTROPIC8_MIPMAP_LINEAR = 14
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum MagFilter : uint
    {
        NND_MAG_NEAREST = 0,
        NND_MAG_LINEAR = 1,
        NND_MAG_ANISOTROPIC = 2
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum MaterialType : uint
    {
        NND_MATTYPE_TEXTURE = 1,
        NND_MATTYPE_TEXTURE2 = 2,
        NND_MATTYPE_TEXTURE3 = 3,
        NND_MATTYPE_TEXTURE4 = 4,
        NND_MATTYPE_TEXMATTYPE2 = 16,
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum NodeNameSortType : uint
    {
        NNE_NODENAME_SORTTYPE_INDEX = 0,
        NNE_NODENAME_SORTTYPE_NAME = 1
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum BlendMode : uint
    {
        NNE_BLENDMODE_SRCALPHA = 0x302,
        NNE_BLENDMODE_INVSRCALPHA = 0x303
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum BlendOperation : uint
    {
        NNE_BLENDOP_ADD = 0x8006
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum LogicOperation : uint
    {
        NNE_LOGICOP_NONE = 0
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum CMPFunction : uint
    {
        NNE_CMPFUNC_NEVER = 0x200,
        NNE_CMPFUNC_LESS = 0x201,
        NNE_CMPFUNC_EQUAL = 0x202,
        NNE_CMPFUNC_LESSEQUAL = 0x203,
        NNE_CMPFUNC_GREATER = 0x204,
        NNE_CMPFUNC_NOTEQUAL = 0x205,
        NNE_CMPFUNC_GREATEREQUAL = 0x206,
        NNE_CMPFUNC_ALWAYS = 0x207
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum NodeType : uint
    {
        NND_NODETYPE_UNIT_TRANSLATION = 1,
        NND_NODETYPE_UNIT_ROTATION = 2,
        NND_NODETYPE_UNIT_SCALING = 4,
        NND_NODETYPE_UNIT_INIT_MATRIX = 8,
        NND_NODETYPE_HIDE = 16,
        NND_NODETYPE_HIDE_BRANCH = 32,
        NND_NODETYPE_UNIT33_INIT_MATRIX = 64,
        NND_NODETYPE_ORTHO33_INIT_MATRIX = 128,
        NND_NODETYPE_ROTATE_TYPE_XYZ = 0,
        NND_NODETYPE_ROTATE_TYPE_XZY = 256,
        NND_NODETYPE_ROTATE_TYPE_YXZ = 512,
        NND_NODETYPE_ROTATE_TYPE_YZX = 768,
        NND_NODETYPE_ROTATE_TYPE_ZXY = 1024,
        NND_NODETYPE_ROTATE_TYPE_ZYX = 1280,
        NND_NODETYPE_ROTATE_TYPE_XYX = 1536,
        NND_NODETYPE_ROTATE_TYPE_XZX = 1792,
        NND_NODETYPE_ROTATE_TYPE_YXY = 2048,
        NND_NODETYPE_ROTATE_TYPE_YZY = 2304,
        NND_NODETYPE_ROTATE_TYPE_ZXZ = 2560,
        NND_NODETYPE_ROTATE_TYPE_ZYZ = 2816,
        NND_NODETYPE_ROTATE_TYPE_MASK = 3840,
        NND_NODETYPE_INHERIT_ONLY_TRANSLATION = 4096,
        NND_NODETYPE_SIIK_EFFECTOR = 8192,
        NND_NODETYPE_SIIK_1BONE_IK_JOINT1 = 16384,
        NND_NODETYPE_SIIK_2BONE_IK_JOINT1 = 32768,
        NND_NODETYPE_SIIK_2BONE_IK_JOINT2 = 65536,
        NND_NODETYPE_SIIK_MINUS_PREFROT_Z = 131072,
        NND_NODETYPE_1BONE_IK_CHAIN_ROOT = 33554432,
        NND_NODETYPE_2BONE_IK_CHAIN_ROOT = 67108864,
        NND_NODETYPE_IK_EFFECTOR = 8192,
        NND_NODETYPE_1BONE_IK_JOINT1 = 16384,
        NND_NODETYPE_2BONE_IK_JOINT1 = 32768,
        NND_NODETYPE_2BONE_IK_JOINT2 = 65536,
        NND_NODETYPE_IK_MINUS_PREFROT_Z = 131072,
        NND_NODETYPE_XSIIK = 134217728,
        NND_NODETYPE_XSIIK_1BONE_IK_CHAIN_ROOT = 167772160,
        NND_NODETYPE_XSIIK_2BONE_IK_CHAIN_ROOT = 201326592,
        NND_NODETYPE_XSIIK_EFFECTOR = 134225920,
        NND_NODETYPE_XSIIK_1BONE_IK_JOINT1 = 134234112,
        NND_NODETYPE_XSIIK_2BONE_IK_JOINT1 = 134250496,
        NND_NODETYPE_XSIIK_2BONE_IK_JOINT2 = 134283264,
        NND_NODETYPE_XSIIK_MINUS_PREFROT_Z = 134348800,
        NND_NODETYPE_IK_MASK = 235134976,
        NND_NODETYPE_RESET_SCALING_X = 262144,
        NND_NODETYPE_RESET_SCALING_Y = 524288,
        NND_NODETYPE_RESET_SCALING_Z = 1048576,
        NND_NODETYPE_BBOX_DATA = 2097152,
        NND_NODETYPE_BBOX_PRIOR_SPHERE = 4194304,
        NND_NODETYPE_BBOX_DOMINATE_X = 8388608,
        NND_NODETYPE_BBOX_DOMINATE_Y = 16777216,
        NND_NODETYPE_BBOX_DOMINATE_Z = 25165824,
        NND_NODETYPE_BBOX_DOMINATE_MASK = 25165824
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum VertexType : uint
    {
        // Masks
        NND_VTXTYPE_PLATFORM_MASK = 0xFFFF,
        NND_VTXTYPE_COMMON_MASK = 0xFF0000,
        NND_VTXTYPE_USER_MASK = 0xFF000000,

        // Xbox/PC types
        NND_VTXTYPE_DX_VERTEXDESC = 1,

        // Common types
        NND_VTXTYPE_COMMON_VTXDESC = 0x10000,
        NND_VTXTYPE_COMMON_VTXDESC_MORPH_TARGET = 0x20000,
        NND_VTXTYPE_COMMON_VTXDESC_MORPH_TARGET_NULL = 0x40000,
        NND_VTXTYPE_COMMON_VTXDESC_MORPH_OBJECT = 0x80000
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum XboxVertexType : uint
    {
        /* Xbox types
           TODO: Is all of this right? */

        NND_VTXTYPE_XB_POSITION = 0x01U,
        NND_VTXTYPE_XB_NORMAL = 0x02U,
        NND_VTXTYPE_XB_COLOR = 0x08U,
        NND_VTXTYPE_XB_COLOR2 = 0x10U,
        NND_VTXTYPE_XB_TANGENT = 0x40U,     // TODO: Is this right? Might be 0x100.
        NND_VTXTYPE_XB_BINORMAL = 0x100U,   // TODO: Is this right? Might be 0x40.
        NND_VTXTYPE_XB_MTX_INDEX4 = 0x400U,
        NND_VTXTYPE_XB_WEIGHT3 = 0x7000U,
        NND_VTXTYPE_XB_TEXCOORD = 0x10000U,

        NND_VTXTYPE_XB_PNCT = (NND_VTXTYPE_XB_POSITION |
            NND_VTXTYPE_XB_NORMAL | NND_VTXTYPE_XB_COLOR |
            NND_VTXTYPE_XB_TEXCOORD),

        NND_VTXTYPE_XB_PW4INCT = (NND_VTXTYPE_XB_POSITION |
            NND_VTXTYPE_XB_WEIGHT3 | NND_VTXTYPE_XB_MTX_INDEX4 |
            NND_VTXTYPE_XB_NORMAL | NND_VTXTYPE_XB_COLOR |
            NND_VTXTYPE_XB_TEXCOORD),

        NND_VTXTYPE_XB_PW4INCTAB = (NND_VTXTYPE_XB_POSITION |
            NND_VTXTYPE_XB_WEIGHT3 | NND_VTXTYPE_XB_MTX_INDEX4 |
            NND_VTXTYPE_XB_NORMAL | NND_VTXTYPE_XB_COLOR |
            NND_VTXTYPE_XB_TEXCOORD | NND_VTXTYPE_XB_TANGENT |
            NND_VTXTYPE_XB_BINORMAL),
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum FlexibleVertexFormat : uint
    {
        // Masks
        NND_D3DFVF_POSITION_MASK = 0x400EU,
        NND_D3DFVF_TEXCOUNT_MASK = 0xf00U,

        // Types
        NND_D3DFVF_TEXTUREFORMAT2 = 0,
        NND_D3DFVF_TEXTUREFORMAT3 = 1,
        NND_D3DFVF_TEXTUREFORMAT4 = 2,
        NND_D3DFVF_TEXTUREFORMAT1 = 3,

        NND_D3DFVF_XYZ = 2,
        NND_D3DFVF_XYZRHW = 4,
        NND_D3DFVF_XYZB1 = 6,
        NND_D3DFVF_XYZB2 = 8,
        NND_D3DFVF_XYZB3 = 10,
        NND_D3DFVF_XYZB4 = 12,
        NND_D3DFVF_XYZB5 = 14,
        NND_D3DFVF_XYZW = 0x4002U,

        NND_D3DFVF_NORMAL = 0x010U,
        NND_D3DFVF_PSIZE = 0x020U,
        NND_D3DFVF_DIFFUSE = 0x040U,
        NND_D3DFVF_SPECULAR = 0x080U,

        NND_D3DFVF_TEX0 = 0x000U,
        NND_D3DFVF_TEX1 = 0x100U,
        NND_D3DFVF_TEX2 = 0x200U,
        NND_D3DFVF_TEX3 = 0x300U,
        NND_D3DFVF_TEX4 = 0x400U,
        NND_D3DFVF_TEX5 = 0x500U,
        NND_D3DFVF_TEX6 = 0x600U,
        NND_D3DFVF_TEX7 = 0x700U,
        NND_D3DFVF_TEX8 = 0x800U,

        NND_D3DFVF_LASTBETA_UBYTE4 = 0x1000U,
        NND_D3DFVF_LASTBETA_D3DCOLOR = 0x8000U
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum PrimitiveType : uint
    {
        // Xbox types
        NND_PRIMTYPE_DX_STRIPLIST = 1
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum MotionType : uint
    {
        // Masks
        NND_MOTIONTYPE_CATEGORY_MASK = 31,
        NND_MOTIONTYPE_REPEAT_MASK = 0x1F0040U,

        // Flags
        NND_MOTIONTYPE_VERSION2 = 0x10000000U,

        // Repeat types
        NND_MOTIONTYPE_TRIGGER = 64,
        NND_MOTIONTYPE_NOREPEAT = 0x10000U,
        NND_MOTIONTYPE_CONSTREPEAT = 0x20000U,
        NND_MOTIONTYPE_REPEAT = 0x40000U,
        NND_MOTIONTYPE_MIRROR = 0x80000U,
        NND_MOTIONTYPE_OFFSET = 0x100000U,

        // Motion types
        NND_MOTIONTYPE_NODE = 1,
        NND_MOTIONTYPE_CAMERA = 2,
        NND_MOTIONTYPE_LIGHT = 4,
        NND_MOTIONTYPE_MORPH = 8,
        NND_MOTIONTYPE_MATERIAL = 16
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum SubMotionType : uint
    {
        // Some of these overlap each other.

        // Masks
        NND_SMOTTYPE_FRAME_MASK = 3,
        NND_SMOTTYPE_ANGLE_MASK = 28,
        NND_SMOTTYPE_TRANSLATION_MASK = 0x700U,
        NND_SMOTTYPE_DIFFUSE_MASK = 0xE00U,
        NND_SMOTTYPE_ROTATION_MASK = 0x7800U,
        NND_SMOTTYPE_SPECULAR_MASK = 0xE000U,
        NND_SMOTTYPE_SCALING_MASK = 0x38000U,
        NND_SMOTTYPE_USER_MASK = 0xC0000U,
        NND_SMOTTYPE_LIGHT_COLOR_MASK = 0xE00000U,
        NND_SMOTTYPE_OFFSET_MASK = 0x1800000U,
        NND_SMOTTYPE_TARGET_MASK = 0x1C0000U,
        NND_SMOTTYPE_AMBIENT_MASK = 0x1C0000U,
        NND_SMOTTYPE_UPTARGET_MASK = 0x1C00000U,
        NND_SMOTTYPE_TEXTURE_MASK = 0x1E00000U,
        NND_SMOTTYPE_UPVECTOR_MASK = 0xE000000U,
        NND_SMOTTYPE_VALUETYPE_MASK = 0xFFFFFF00U,

        // Frame types
        NND_SMOTTYPE_FRAME_FLOAT = 1,
        NND_SMOTTYPE_FRAME_SINT16 = 2,

        // Angle types
        NND_SMOTTYPE_ANGLE_RADIAN = 4,
        NND_SMOTTYPE_ANGLE_ANGLE32 = 8,
        NND_SMOTTYPE_ANGLE_ANGLE16 = 16,

        // Node types
        NND_SMOTTYPE_TRANSLATION_X = 0x100U,
        NND_SMOTTYPE_TRANSLATION_Y = 0x200U,
        NND_SMOTTYPE_TRANSLATION_Z = 0x400U,

        NND_SMOTTYPE_TRANSLATION_XYZ = (NND_SMOTTYPE_TRANSLATION_X |
            NND_SMOTTYPE_TRANSLATION_Y | NND_SMOTTYPE_TRANSLATION_Z),

        NND_SMOTTYPE_ROTATION_X = 0x800U,
        NND_SMOTTYPE_ROTATION_Y = 0x1000U,
        NND_SMOTTYPE_ROTATION_Z = 0x2000U,

        NND_SMOTTYPE_ROTATION_XYZ = (NND_SMOTTYPE_ROTATION_X |
            NND_SMOTTYPE_ROTATION_Y | NND_SMOTTYPE_ROTATION_Z),

        NND_SMOTTYPE_QUATERNION = 0x4000U,

        NND_SMOTTYPE_SCALING_X = 0x8000U,
        NND_SMOTTYPE_SCALING_Y = 0x10000U,
        NND_SMOTTYPE_SCALING_Z = 0x20000U,

        NND_SMOTTYPE_SCALING_XYZ = (NND_SMOTTYPE_SCALING_X |
            NND_SMOTTYPE_SCALING_Y | NND_SMOTTYPE_SCALING_Z),

        NND_SMOTTYPE_USER_UINT32 = 0x40000U,
        NND_SMOTTYPE_USER_FLOAT = 0x80000U,

        NND_SMOTTYPE_NODEHIDE = 0x100000U,

        // Camera types
        NND_SMOTTYPE_TARGET_X = 0x40000U,
        NND_SMOTTYPE_TARGET_Y = 0x80000U,
        NND_SMOTTYPE_TARGET_Z = 0x100000U,

        NND_SMOTTYPE_TARGET_XYZ = (NND_SMOTTYPE_TARGET_X |
            NND_SMOTTYPE_TARGET_Y | NND_SMOTTYPE_TARGET_Z),

        NND_SMOTTYPE_ROLL = 0x200000U,
        NND_SMOTTYPE_UPTARGET_X = 0x400000U,
        NND_SMOTTYPE_UPTARGET_Y = 0x800000U,
        NND_SMOTTYPE_UPTARGET_Z = 0x1000000U,

        NND_SMOTTYPE_UPTARGET_XYZ = (NND_SMOTTYPE_UPTARGET_X |
            NND_SMOTTYPE_UPTARGET_Y | NND_SMOTTYPE_UPTARGET_Z),

        NND_SMOTTYPE_UPVECTOR_X = 0x2000000U,
        NND_SMOTTYPE_UPVECTOR_Y = 0x4000000U,
        NND_SMOTTYPE_UPVECTOR_Z = 0x8000000U,

        NND_SMOTTYPE_UPVECTOR_XYZ = (NND_SMOTTYPE_UPVECTOR_X |
            NND_SMOTTYPE_UPVECTOR_Y | NND_SMOTTYPE_UPVECTOR_Z),

        NND_SMOTTYPE_FOVY = 0x10000000U,
        NND_SMOTTYPE_ZNEAR = 0x20000000U,
        NND_SMOTTYPE_ZFAR = 0x40000000U,
        NND_SMOTTYPE_ASPECT = 0x80000000U,

        // Light types
        NND_SMOTTYPE_LIGHT_COLOR_R = 0x200000U,
        NND_SMOTTYPE_LIGHT_COLOR_G = 0x400000U,
        NND_SMOTTYPE_LIGHT_COLOR_B = 0x800000U,

        NND_SMOTTYPE_LIGHT_COLOR_RGB = (NND_SMOTTYPE_LIGHT_COLOR_R |
            NND_SMOTTYPE_LIGHT_COLOR_G | NND_SMOTTYPE_LIGHT_COLOR_B),

        NND_SMOTTYPE_LIGHT_ALPHA = 0x1000000U,
        NND_SMOTTYPE_LIGHT_INTENSITY = 0x2000000U,

        NND_SMOTTYPE_FALLOFF_START = 0x4000000U,
        NND_SMOTTYPE_FALLOFF_END = 0x8000000U,

        NND_SMOTTYPE_INNER_ANGLE = 0x10000000U,
        NND_SMOTTYPE_OUTER_ANGLE = 0x20000000U,
        NND_SMOTTYPE_INNER_RANGE = 0x40000000U,
        NND_SMOTTYPE_OUTER_RANGE = 0x80000000U,

        // Morph types
        NND_SMOTTYPE_MORPH_WEIGHT = 0x1000000U,

        // Material types
        NND_SMOTTYPE_HIDE = 0x100U,

        NND_SMOTTYPE_DIFFUSE_R = 0x200U,
        NND_SMOTTYPE_DIFFUSE_G = 0x400U,
        NND_SMOTTYPE_DIFFUSE_B = 0x800U,

        NND_SMOTTYPE_DIFFUSE_RGB = (NND_SMOTTYPE_DIFFUSE_R |
            NND_SMOTTYPE_DIFFUSE_G | NND_SMOTTYPE_DIFFUSE_B),

        NND_SMOTTYPE_ALPHA = 0x1000U,

        NND_SMOTTYPE_SPECULAR_R = 0x2000U,
        NND_SMOTTYPE_SPECULAR_G = 0x4000U,
        NND_SMOTTYPE_SPECULAR_B = 0x8000U,

        NND_SMOTTYPE_SPECULAR_RGB = (NND_SMOTTYPE_SPECULAR_R |
            NND_SMOTTYPE_SPECULAR_G | NND_SMOTTYPE_SPECULAR_B),

        NND_SMOTTYPE_SPECULAR_LEVEL = 0x10000U,
        NND_SMOTTYPE_SPECULAR_GLOSS = 0x20000U,

        NND_SMOTTYPE_AMBIENT_R = 0x40000U,
        NND_SMOTTYPE_AMBIENT_G = 0x80000U,
        NND_SMOTTYPE_AMBIENT_B = 0x100000U,

        NND_SMOTTYPE_AMBIENT_RGB = (NND_SMOTTYPE_AMBIENT_R |
            NND_SMOTTYPE_AMBIENT_G | NND_SMOTTYPE_AMBIENT_B),

        NND_SMOTTYPE_TEXTURE_INDEX = 0x200000U,
        NND_SMOTTYPE_TEXTURE_BLEND = 0x400000U,

        NND_SMOTTYPE_OFFSET_U = 0x800000U,
        NND_SMOTTYPE_OFFSET_V = 0x1000000U,
        NND_SMOTTYPE_OFFSET_UV = (NND_SMOTTYPE_OFFSET_U | NND_SMOTTYPE_OFFSET_V),

        NND_SMOTTYPE_MATCLBK_USER = 0x2000000U
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum SubMotionInterpolationType : uint
    {
        // Masks
        NND_SMOTIPTYPE_IP_MASK = 0xE77U,
        NND_SMOTIPTYPE_REPEAT_MASK = 0x1F0000U,

        // Repeat types
        NND_SMOTIPTYPE_NOREPEAT = 0x10000U,
        NND_SMOTIPTYPE_CONSTREPEAT = 0x20000U,
        NND_SMOTIPTYPE_REPEAT = 0x40000U,
        NND_SMOTIPTYPE_MIRROR = 0x80000U,
        NND_SMOTIPTYPE_OFFSET = 0x100000U,

        // Interpolation types
        NND_SMOTIPTYPE_SPLINE = 1,
        NND_SMOTIPTYPE_LINEAR = 2,
        NND_SMOTIPTYPE_CONSTANT = 4,
        NND_SMOTIPTYPE_BEZIER = 16,
        NND_SMOTIPTYPE_SI_SPLINE = 32,
        NND_SMOTIPTYPE_TRIGGER = 64,
        NND_SMOTIPTYPE_QUAT_LERP = 512,
        NND_SMOTIPTYPE_QUAT_SLERP = 1024,
        NND_SMOTIPTYPE_QUAT_SQUAD = 2048
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum CameraType : uint
    {
        NND_CAMERATYPE_MEMBER_USER = 1,
        NND_CAMERATYPE_MEMBER_FOVY = 2,
        NND_CAMERATYPE_MEMBER_ASPECT = 4,
        NND_CAMERATYPE_MEMBER_ZNEAR = 8,
        NND_CAMERATYPE_MEMBER_ZFAR = 16,
        NND_CAMERATYPE_MEMBER_POSITION = 32,
        NND_CAMERATYPE_MEMBER_TARGET = 64,
        NND_CAMERATYPE_MEMBER_ROLL = 128,
        NND_CAMERATYPE_MEMBER_UPVECTOR = 256,
        NND_CAMERATYPE_MEMBER_UPTARGET = 512,
        NND_CAMERATYPE_MEMBER_ROTTYPE = 1024,
        NND_CAMERATYPE_MEMBER_ROTATION = 2048,
        NND_CAMERATYPE_MEMBER_COMMON = 63,
        NND_CAMERATYPE_ROTATION = 3135,
        NND_CAMERATYPE_TARGET_ROLL = 255,
        NND_CAMERATYPE_TARGET_UPVECTOR = 383,
        NND_CAMERATYPE_TARGET_UPTARGET = 639
    }

    [Flags]
    //[JsonConverter(typeof(StringEnumConverter))]
    public enum LightType : uint
    {
        NND_LIGHTTYPE_STANDARD_GL = 65536,
        NND_LIGHTTYPE_MASK = 65599,
        NND_LIGHTTYPE_PARALLEL = 1,
        NND_LIGHTTYPE_POINT = 2,
        NND_LIGHTTYPE_TARGET_SPOT = 4,
        NND_LIGHTTYPE_ROTATION_SPOT = 8,
        NND_LIGHTTYPE_TARGET_DIRECTIONAL = 16,
        NND_LIGHTTYPE_ROTATION_DIRECTIONAL = 32,
        NND_LIGHTTYPE_COMMON_MASK = 63
    }
}
